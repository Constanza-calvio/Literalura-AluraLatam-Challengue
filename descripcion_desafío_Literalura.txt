¡Hola! El desafío Literalura consiste en crear un catálogo de libros en Java usando Spring Boot y PostgreSQL. Piensa en ello como una pequeña biblioteca digital en tu consola.

Como guía, tu proyecto debe implementar estas cinco funcionalidades principales:

Buscar libro por título: El usuario ingresa un título (ej: "Pride"), tu aplicación busca en la API Gutendex, y si lo encuentra, guarda la información (título completo, autor, idioma, número de descargas) en tu base de datos PostgreSQL. Debes manejar el caso en que el libro no se encuentre.

Listar libros: Mostrar todos los libros guardados en la base de datos.

Listar autores: Mostrar todos los autores presentes en la base de datos.

Listar autores vivos en un año específico: El usuario ingresa un año, y la aplicación muestra los autores que estaban vivos en ese año. Necesitarás obtener la fecha de nacimiento del autor desde la API.

Listar libros por idioma: El usuario ingresa un código de idioma (ES, EN, FR, PT), y la aplicación muestra los libros de ese idioma.

Recuerda que la aplicación es solo de consola, no necesitas una interfaz gráfica. Además, ¡no olvides manejar la posibilidad de que el usuario intente agregar un libro que ya existe en la base de datos! La API Gutendex está en gutendex.com y la documentación te ayudará a entender cómo obtener la información que necesitas. ¡Mucha suerte y a programar! ¿Tienes alguna otra duda?

¡Claro que sí! Para comenzar tu proyecto Literalura, necesitarás varias partes trabajando juntas. Piensa en ello como un equipo de trabajo: cada componente tiene una función específica.

Primero, necesitas definir tus modelos (entidades): Estos representan la información que guardarás en la base de datos. Necesitarás al menos dos: uno para Libro (con atributos como título, autor, idioma, número de descargas) y otro para Autor (con atributos como nombre y fecha de nacimiento). ¿Qué atributos consideras esenciales para cada uno? ¿Necesitas algún atributo adicional?

Luego, necesitas un repositorio (repository): Este es el intermediario entre tu código y la base de datos. Usarás Spring Data JPA para simplificar esto. Tendrás un repositorio para Libro y otro para Autor (o uno solo si prefieres). Estos repositorios te permitirán guardar, buscar y listar datos de la base de datos. ¿Qué métodos necesitas en cada repositorio para cubrir las funcionalidades del desafío?

Después, necesitas un servicio (service): Este se encargará de la lógica de negocio. Por ejemplo, el servicio buscará libros en la API Gutendex, manejará la persistencia de datos (usando el repositorio), y validará que no se inserten libros duplicados. ¿Qué métodos necesitas en tu servicio para cada una de las cinco funcionalidades?

Finalmente, necesitas un controlador (controller): Este se encargará de recibir las peticiones del usuario (en este caso, desde la consola) y de devolver las respuestas. Usarás un método para cada funcionalidad. ¿Cómo recibirás la entrada del usuario? ¿Cómo mostrarás los resultados en la consola?

Por último, recuerda que necesitarás configurar tu servidor usando Spring Boot. Esto implica configurar las dependencias en pom.xml (Spring Data JPA, PostgreSQL Driver, etc.) y configurar la conexión a la base de datos. ¿Ya has creado tu proyecto en start.spring.io? ¿Has revisado las dependencias necesarias?

Recuerda que esta es una estructura básica. Puedes añadir más componentes o modificarlos según tus necesidades. ¡Anímate a empezar a diseñar tus clases y métodos! ¿Qué te parece si empezamos con los modelos? ¿Qué atributos incluirías en la clase Libro?